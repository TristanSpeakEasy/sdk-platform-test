// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/tristanspeakeasy/sdk-platform-test/internal/utils"
)

type CircularUnionType string

const (
	CircularUnionTypeMapOfCircularUnion   CircularUnionType = "mapOfCircularUnion"
	CircularUnionTypeStr                  CircularUnionType = "str"
	CircularUnionTypeInteger              CircularUnionType = "integer"
	CircularUnionTypeBoolean              CircularUnionType = "boolean"
	CircularUnionTypeArrayOfCircularUnion CircularUnionType = "arrayOfCircularUnion"
	CircularUnionTypeNumber               CircularUnionType = "number"
)

type CircularUnion struct {
	MapOfCircularUnion   map[string]CircularUnion `queryParam:"inline"`
	Str                  *string                  `queryParam:"inline"`
	Integer              *int64                   `queryParam:"inline"`
	Boolean              *bool                    `queryParam:"inline"`
	ArrayOfCircularUnion []CircularUnion          `queryParam:"inline"`
	Number               *float64                 `queryParam:"inline"`

	Type CircularUnionType
}

func CreateCircularUnionMapOfCircularUnion(mapOfCircularUnion map[string]CircularUnion) CircularUnion {
	typ := CircularUnionTypeMapOfCircularUnion

	return CircularUnion{
		MapOfCircularUnion: mapOfCircularUnion,
		Type:               typ,
	}
}

func CreateCircularUnionStr(str string) CircularUnion {
	typ := CircularUnionTypeStr

	return CircularUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCircularUnionInteger(integer int64) CircularUnion {
	typ := CircularUnionTypeInteger

	return CircularUnion{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCircularUnionBoolean(boolean bool) CircularUnion {
	typ := CircularUnionTypeBoolean

	return CircularUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCircularUnionArrayOfCircularUnion(arrayOfCircularUnion []CircularUnion) CircularUnion {
	typ := CircularUnionTypeArrayOfCircularUnion

	return CircularUnion{
		ArrayOfCircularUnion: arrayOfCircularUnion,
		Type:                 typ,
	}
}

func CreateCircularUnionNumber(number float64) CircularUnion {
	typ := CircularUnionTypeNumber

	return CircularUnion{
		Number: &number,
		Type:   typ,
	}
}

func (u *CircularUnion) UnmarshalJSON(data []byte) error {

	var mapOfCircularUnion map[string]CircularUnion = map[string]CircularUnion{}
	if err := utils.UnmarshalJSON(data, &mapOfCircularUnion, "", true, true); err == nil {
		u.MapOfCircularUnion = mapOfCircularUnion
		u.Type = CircularUnionTypeMapOfCircularUnion
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CircularUnionTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CircularUnionTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CircularUnionTypeBoolean
		return nil
	}

	var arrayOfCircularUnion []CircularUnion = []CircularUnion{}
	if err := utils.UnmarshalJSON(data, &arrayOfCircularUnion, "", true, true); err == nil {
		u.ArrayOfCircularUnion = arrayOfCircularUnion
		u.Type = CircularUnionTypeArrayOfCircularUnion
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CircularUnionTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CircularUnion", string(data))
}

func (u CircularUnion) MarshalJSON() ([]byte, error) {
	if u.MapOfCircularUnion != nil {
		return utils.MarshalJSON(u.MapOfCircularUnion, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfCircularUnion != nil {
		return utils.MarshalJSON(u.ArrayOfCircularUnion, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CircularUnion: all fields are null")
}
