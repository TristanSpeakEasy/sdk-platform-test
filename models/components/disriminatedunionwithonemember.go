// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/tristanspeakeasy/sdk-platform-test/internal/utils"
)

type DisriminatedUnionWithOneMemberType string

const (
	DisriminatedUnionWithOneMemberTypeType1 DisriminatedUnionWithOneMemberType = "type1"
)

type DisriminatedUnionWithOneMember struct {
	ExhaustiveObject *ExhaustiveObject `queryParam:"inline"`

	Type DisriminatedUnionWithOneMemberType
}

func CreateDisriminatedUnionWithOneMemberType1(type1 ExhaustiveObject) DisriminatedUnionWithOneMember {
	typ := DisriminatedUnionWithOneMemberTypeType1

	typStr := string(typ)
	type1.Type = &typStr

	return DisriminatedUnionWithOneMember{
		ExhaustiveObject: &type1,
		Type:             typ,
	}
}

func (u *DisriminatedUnionWithOneMember) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "type1":
		exhaustiveObject := new(ExhaustiveObject)
		if err := utils.UnmarshalJSON(data, &exhaustiveObject, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == type1) type ExhaustiveObject within DisriminatedUnionWithOneMember: %w", string(data), err)
		}

		u.ExhaustiveObject = exhaustiveObject
		u.Type = DisriminatedUnionWithOneMemberTypeType1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DisriminatedUnionWithOneMember", string(data))
}

func (u DisriminatedUnionWithOneMember) MarshalJSON() ([]byte, error) {
	if u.ExhaustiveObject != nil {
		return utils.MarshalJSON(u.ExhaustiveObject, "", true)
	}

	return nil, errors.New("could not marshal union type DisriminatedUnionWithOneMember: all fields are null")
}
