// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/tristanspeakeasy/sdk-platform-test/models/components"
)

type GetFullyFlattenedRequestSecurity struct {
	APIKey *string `security:"scheme,type=apiKey,subtype=header,name=api_key,env=sdk_api_key"`
}

func (o *GetFullyFlattenedRequestSecurity) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

type Emoji string

const (
	EmojiWave     Emoji = "wave"
	EmojiSmiley   Emoji = "smiley"
	EmojiThumbsup Emoji = "thumbsup"
	EmojiTada     Emoji = "tada"
)

func (e Emoji) ToPointer() *Emoji {
	return &e
}
func (e *Emoji) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "wave":
		fallthrough
	case "smiley":
		fallthrough
	case "thumbsup":
		fallthrough
	case "tada":
		*e = Emoji(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Emoji: %v", v)
	}
}

type GetFullyFlattenedRequestRequestBody struct {
	Name    string  `json:"name"`
	Emoji   *Emoji  `json:"emoji,omitempty"`
	Gif     *string `json:"gif,omitempty"`
	Reply   *bool   `json:"reply,omitempty"`
	Private *bool   `json:"private,omitempty"`
}

func (o *GetFullyFlattenedRequestRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetFullyFlattenedRequestRequestBody) GetEmoji() *Emoji {
	if o == nil {
		return nil
	}
	return o.Emoji
}

func (o *GetFullyFlattenedRequestRequestBody) GetGif() *string {
	if o == nil {
		return nil
	}
	return o.Gif
}

func (o *GetFullyFlattenedRequestRequestBody) GetReply() *bool {
	if o == nil {
		return nil
	}
	return o.Reply
}

func (o *GetFullyFlattenedRequestRequestBody) GetPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.Private
}

type GetFullyFlattenedRequestRequest struct {
	Lang        string                              `queryParam:"style=form,explode=true,name=lang"`
	MaxLength   *int64                              `queryParam:"style=form,explode=true,name=max_length"`
	RequestBody GetFullyFlattenedRequestRequestBody `request:"mediaType=application/json"`
}

func (o *GetFullyFlattenedRequestRequest) GetLang() string {
	if o == nil {
		return ""
	}
	return o.Lang
}

func (o *GetFullyFlattenedRequestRequest) GetMaxLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *GetFullyFlattenedRequestRequest) GetRequestBody() GetFullyFlattenedRequestRequestBody {
	if o == nil {
		return GetFullyFlattenedRequestRequestBody{}
	}
	return o.RequestBody
}

type GetFullyFlattenedRequestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *GetFullyFlattenedRequestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
