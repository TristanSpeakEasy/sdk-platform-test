// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// IntEnum - An integer enum property.
type IntEnum int64

const (
	IntEnumFirst  IntEnum = 1
	IntEnumSecond IntEnum = 2
	IntEnumThird  IntEnum = 3
)

func (e IntEnum) ToPointer() *IntEnum {
	return &e
}
func (e *IntEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = IntEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntEnum: %v", v)
	}
}

// Int32Enum - An int32 enum property.
type Int32Enum int

const (
	Int32EnumFiftyFive              Int32Enum = 55
	Int32EnumSixtyNine              Int32Enum = 69
	Int32EnumOneHundredAndEightyOne Int32Enum = 181
)

func (e Int32Enum) ToPointer() *Int32Enum {
	return &e
}
func (e *Int32Enum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 55:
		fallthrough
	case 69:
		fallthrough
	case 181:
		*e = Int32Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Int32Enum: %v", v)
	}
}

type AnyType string

const (
	AnyTypeSimpleObject AnyType = "SimpleObject"
	AnyTypeStr          AnyType = "str"
)

type Any struct {
	SimpleObject *SimpleObject
	Str          *string

	Type AnyType
}

func CreateAnySimpleObject(simpleObject SimpleObject) Any {
	typ := AnyTypeSimpleObject

	return Any{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateAnyStr(str string) Any {
	typ := AnyTypeStr

	return Any{
		Str:  &str,
		Type: typ,
	}
}

func (u *Any) UnmarshalJSON(data []byte) error {

	var simpleObject SimpleObject = SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = AnyTypeSimpleObject
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AnyTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Any", string(data))
}

func (u Any) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Any: all fields are null")
}

type NullableIntEnum int64

const (
	NullableIntEnumFirst  NullableIntEnum = 1
	NullableIntEnumSecond NullableIntEnum = 2
	NullableIntEnumThird  NullableIntEnum = 3
)

func (e NullableIntEnum) ToPointer() *NullableIntEnum {
	return &e
}
func (e *NullableIntEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = NullableIntEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableIntEnum: %v", v)
	}
}

type NullableStringEnum string

const (
	NullableStringEnumFirst  NullableStringEnum = "First"
	NullableStringEnumSecond NullableStringEnum = "Second"
	NullableStringEnumThird  NullableStringEnum = "Third"
)

func (e NullableStringEnum) ToPointer() *NullableStringEnum {
	return &e
}
func (e *NullableStringEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "First":
		fallthrough
	case "Second":
		fallthrough
	case "Third":
		*e = NullableStringEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NullableStringEnum: %v", v)
	}
}

type Icon string

const (
	IconTick     Icon = "tick"
	IconThumbsUp Icon = "thumbs-up"
	IconFire     Icon = "fire"
)

func (e Icon) ToPointer() *Icon {
	return &e
}
func (e *Icon) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tick":
		fallthrough
	case "thumbs-up":
		fallthrough
	case "fire":
		*e = Icon(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Icon: %v", v)
	}
}

type HeroWidth int64

const (
	HeroWidthFourHundredAndEighty  HeroWidth = 480
	HeroWidthSevenHundredAndTwenty HeroWidth = 720
	HeroWidthOneThousandAndEighty  HeroWidth = 1080
)

func (e HeroWidth) ToPointer() *HeroWidth {
	return &e
}

// ExhaustiveObject - A simple object that uses all our supported primitive types and enums and has optional properties.
//
// https://speakeasy.com - A link to the external docs.
type ExhaustiveObject struct {
	// A string property.
	Str string `json:"str"`
	// A boolean property.
	Bool bool `json:"bool"`
	// An integer property.
	Integer int64 `json:"int"`
	// An int32 property.
	Int32 int `json:"int32"`
	// A number property.
	Num float64 `json:"num"`
	// A float32 property.
	Float32  float32 `json:"float32"`
	EnumProp *Enum   `default:"First" json:"enumProp"`
	// A date property.
	Date types.Date `json:"date"`
	// A date-time property.
	DateTime time.Time `json:"dateTime"`
	// An any property.
	Anything any `json:"anything"`
	// An optional string property.
	StrOpt *string `json:"strOpt,omitempty"`
	// An optional boolean property.
	BoolOpt *bool `json:"boolOpt,omitempty"`
	// An optional integer property will be null for tests.
	IntOptNull *int64 `json:"intOptNull,omitempty"`
	// An optional number property will be null for tests.
	NumOptNull *float64 `json:"numOptNull,omitempty"`
	// An integer enum property.
	IntEnum *IntEnum `default:"2" json:"intEnum"`
	// An int32 enum property.
	Int32Enum  Int32Enum               `json:"int32Enum"`
	Bigint     *big.Int                `json:"bigint"`
	BigintStr  *big.Int                `default:"12345678901234567890" bigint:"string" json:"bigintStr"`
	decimal    *decimal.Big            `const:"3.141592653589" decimal:"number" json:"decimal,omitempty"`
	DecimalStr *decimal.Big            `decimal:"number" json:"decimalStr"`
	Obj        SimpleObject            `json:"obj"`
	Map        map[string]SimpleObject `json:"map"`
	Arr        []SimpleObject          `json:"arr"`
	Any        Any                     `json:"any"`
	Type       *string                 `default:"0" json:"type"`
	// A property with dots.
	SomePropertyWithDots *string            `json:"some.property.with.dots,omitempty"`
	NullableIntEnum      *NullableIntEnum   `default:"2" json:"nullableIntEnum"`
	NullableStringEnum   NullableStringEnum `json:"nullableStringEnum"`
	Color                *Color             `default:"blue" json:"color"`
	Icon                 Icon               `json:"icon"`
	HeroWidth            *HeroWidth         `json:"heroWidth,omitempty"`
}

func (e ExhaustiveObject) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExhaustiveObject) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ExhaustiveObject) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}

func (o *ExhaustiveObject) GetBool() bool {
	if o == nil {
		return false
	}
	return o.Bool
}

func (o *ExhaustiveObject) GetInteger() int64 {
	if o == nil {
		return 0
	}
	return o.Integer
}

func (o *ExhaustiveObject) GetInt32() int {
	if o == nil {
		return 0
	}
	return o.Int32
}

func (o *ExhaustiveObject) GetNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Num
}

func (o *ExhaustiveObject) GetFloat32() float32 {
	if o == nil {
		return 0.0
	}
	return o.Float32
}

func (o *ExhaustiveObject) GetEnumProp() *Enum {
	if o == nil {
		return nil
	}
	return o.EnumProp
}

func (o *ExhaustiveObject) GetDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.Date
}

func (o *ExhaustiveObject) GetDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateTime
}

func (o *ExhaustiveObject) GetAnything() any {
	if o == nil {
		return nil
	}
	return o.Anything
}

func (o *ExhaustiveObject) GetStrOpt() *string {
	if o == nil {
		return nil
	}
	return o.StrOpt
}

func (o *ExhaustiveObject) GetBoolOpt() *bool {
	if o == nil {
		return nil
	}
	return o.BoolOpt
}

func (o *ExhaustiveObject) GetIntOptNull() *int64 {
	if o == nil {
		return nil
	}
	return o.IntOptNull
}

func (o *ExhaustiveObject) GetNumOptNull() *float64 {
	if o == nil {
		return nil
	}
	return o.NumOptNull
}

func (o *ExhaustiveObject) GetIntEnum() *IntEnum {
	if o == nil {
		return nil
	}
	return o.IntEnum
}

func (o *ExhaustiveObject) GetInt32Enum() Int32Enum {
	if o == nil {
		return Int32Enum(0)
	}
	return o.Int32Enum
}

func (o *ExhaustiveObject) GetBigint() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.Bigint
}

func (o *ExhaustiveObject) GetBigintStr() *big.Int {
	if o == nil {
		return nil
	}
	return o.BigintStr
}

func (o *ExhaustiveObject) GetDecimal() *decimal.Big {
	return types.MustNewDecimalFromString("3.141592653589")
}

func (o *ExhaustiveObject) GetDecimalStr() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.DecimalStr
}

func (o *ExhaustiveObject) GetObj() SimpleObject {
	if o == nil {
		return SimpleObject{}
	}
	return o.Obj
}

func (o *ExhaustiveObject) GetMap() map[string]SimpleObject {
	if o == nil {
		return map[string]SimpleObject{}
	}
	return o.Map
}

func (o *ExhaustiveObject) GetArr() []SimpleObject {
	if o == nil {
		return []SimpleObject{}
	}
	return o.Arr
}

func (o *ExhaustiveObject) GetAny() Any {
	if o == nil {
		return Any{}
	}
	return o.Any
}

func (o *ExhaustiveObject) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExhaustiveObject) GetSomePropertyWithDots() *string {
	if o == nil {
		return nil
	}
	return o.SomePropertyWithDots
}

func (o *ExhaustiveObject) GetNullableIntEnum() *NullableIntEnum {
	if o == nil {
		return nil
	}
	return o.NullableIntEnum
}

func (o *ExhaustiveObject) GetNullableStringEnum() NullableStringEnum {
	if o == nil {
		return NullableStringEnum("")
	}
	return o.NullableStringEnum
}

func (o *ExhaustiveObject) GetColor() *Color {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ExhaustiveObject) GetIcon() Icon {
	if o == nil {
		return Icon("")
	}
	return o.Icon
}

func (o *ExhaustiveObject) GetHeroWidth() *HeroWidth {
	if o == nil {
		return nil
	}
	return o.HeroWidth
}
