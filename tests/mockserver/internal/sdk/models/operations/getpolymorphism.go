// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type OneOfWithUnionDescriptionType string

const (
	OneOfWithUnionDescriptionTypeExhaustiveObject OneOfWithUnionDescriptionType = "ExhaustiveObject"
	OneOfWithUnionDescriptionTypeSimpleObject     OneOfWithUnionDescriptionType = "SimpleObject"
)

// OneOfWithUnionDescription - A union of two types.
type OneOfWithUnionDescription struct {
	ExhaustiveObject *components.ExhaustiveObject
	SimpleObject     *components.SimpleObject

	Type OneOfWithUnionDescriptionType
}

func CreateOneOfWithUnionDescriptionExhaustiveObject(exhaustiveObject components.ExhaustiveObject) OneOfWithUnionDescription {
	typ := OneOfWithUnionDescriptionTypeExhaustiveObject

	return OneOfWithUnionDescription{
		ExhaustiveObject: &exhaustiveObject,
		Type:             typ,
	}
}

func CreateOneOfWithUnionDescriptionSimpleObject(simpleObject components.SimpleObject) OneOfWithUnionDescription {
	typ := OneOfWithUnionDescriptionTypeSimpleObject

	return OneOfWithUnionDescription{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func (u *OneOfWithUnionDescription) UnmarshalJSON(data []byte) error {

	var simpleObject components.SimpleObject = components.SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = OneOfWithUnionDescriptionTypeSimpleObject
		return nil
	}

	var exhaustiveObject components.ExhaustiveObject = components.ExhaustiveObject{}
	if err := utils.UnmarshalJSON(data, &exhaustiveObject, "", true, true); err == nil {
		u.ExhaustiveObject = &exhaustiveObject
		u.Type = OneOfWithUnionDescriptionTypeExhaustiveObject
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OneOfWithUnionDescription", string(data))
}

func (u OneOfWithUnionDescription) MarshalJSON() ([]byte, error) {
	if u.ExhaustiveObject != nil {
		return utils.MarshalJSON(u.ExhaustiveObject, "", true)
	}

	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	return nil, errors.New("could not marshal union type OneOfWithUnionDescription: all fields are null")
}

type SimpleAllOf struct {
	// A string property.
	Str *string `json:"str,omitempty"`
	// A boolean property.
	Bool *bool `json:"bool,omitempty"`
}

func (o *SimpleAllOf) GetStr() *string {
	if o == nil {
		return nil
	}
	return o.Str
}

func (o *SimpleAllOf) GetBool() *bool {
	if o == nil {
		return nil
	}
	return o.Bool
}

// AllOfWithFactoredOutProperties - An object with allOf and factored out properties.
type AllOfWithFactoredOutProperties struct {
	// An overriding property.
	AnOverridingProperty *string `json:"anOverridingProperty,omitempty"`
	// Another property.
	AnotherProperty *string `json:"anotherProperty,omitempty"`
	// An extra property.
	AnExtraProperty *string `json:"anExtraProperty,omitempty"`
}

func (o *AllOfWithFactoredOutProperties) GetAnOverridingProperty() *string {
	if o == nil {
		return nil
	}
	return o.AnOverridingProperty
}

func (o *AllOfWithFactoredOutProperties) GetAnotherProperty() *string {
	if o == nil {
		return nil
	}
	return o.AnotherProperty
}

func (o *AllOfWithFactoredOutProperties) GetAnExtraProperty() *string {
	if o == nil {
		return nil
	}
	return o.AnExtraProperty
}

type GetPolymorphismResponseBody struct {
	// A union of two types.
	OneOfWithUnionDescription *OneOfWithUnionDescription `json:"oneOfWithUnionDescription,omitempty"`
	// A union of two types with factored out properties.
	OneOfWithFactoredOutProperties *components.OneOfWithFactoredOutProperties `json:"oneOfWithFactoredOutProperties,omitempty"`
	SimpleAllOf                    *SimpleAllOf                               `json:"simpleAllOf,omitempty"`
	// An object with allOf and factored out properties.
	AllOfWithFactoredOutProperties *AllOfWithFactoredOutProperties `json:"allOfWithFactoredOutProperties,omitempty"`
	CircularUnion                  *components.CircularUnion       `json:"circularUnion,omitempty"`
}

func (o *GetPolymorphismResponseBody) GetOneOfWithUnionDescription() *OneOfWithUnionDescription {
	if o == nil {
		return nil
	}
	return o.OneOfWithUnionDescription
}

func (o *GetPolymorphismResponseBody) GetOneOfWithFactoredOutProperties() *components.OneOfWithFactoredOutProperties {
	if o == nil {
		return nil
	}
	return o.OneOfWithFactoredOutProperties
}

func (o *GetPolymorphismResponseBody) GetSimpleAllOf() *SimpleAllOf {
	if o == nil {
		return nil
	}
	return o.SimpleAllOf
}

func (o *GetPolymorphismResponseBody) GetAllOfWithFactoredOutProperties() *AllOfWithFactoredOutProperties {
	if o == nil {
		return nil
	}
	return o.AllOfWithFactoredOutProperties
}

func (o *GetPolymorphismResponseBody) GetCircularUnion() *components.CircularUnion {
	if o == nil {
		return nil
	}
	return o.CircularUnion
}

type GetPolymorphismResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetPolymorphismResponseBody
}

func (o *GetPolymorphismResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPolymorphismResponse) GetObject() *GetPolymorphismResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
