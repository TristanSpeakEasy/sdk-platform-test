// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	sdkplatformtest "github.com/tristanspeakeasy/sdk-platform-test"
	"github.com/tristanspeakeasy/sdk-platform-test/internal/utils"
	"github.com/tristanspeakeasy/sdk-platform-test/models/components"
	"github.com/tristanspeakeasy/sdk-platform-test/models/operations"
	"os"
	"testing"
)

func TestSDK_TestEndpoint(t *testing.T) {
	t.Skip("incomplete test found please make sure to address the following errors: [`workflow step testEndpoint.test referencing operation testEndpoint is missing required request body`, `workflow step testEndpoint.test referencing operation testEndpoint missing required path parameter testName`]")
}

func TestSDK_GetUserTestWithStatusCodeOnly(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getUser-testWithStatusCodeOnly")),
	)

	res, err := s.GetUser(ctx, "test123")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSDK_GetUserTestWithResponseBody(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getUser-testWithResponseBody")),
	)

	res, err := s.GetUser(ctx, "test123")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.User)
	assert.Equal(t, &components.User{
		ID:         "test123",
		Email:      "Trystan_Crooks@hotmail.com",
		FirstName:  sdkplatformtest.String("Trystan"),
		LastName:   sdkplatformtest.String("Crooks"),
		Age:        sdkplatformtest.Float64(32),
		PostalCode: sdkplatformtest.String("94110"),
		Metadata: &components.Metadata{
			Allergies: sdkplatformtest.String("none"),
			AdditionalProperties: map[string]string{
				"color":      "red",
				"height":     "182",
				"weight":     "77",
				"is_smoking": "true",
			},
		},
	}, res.User)

}

func TestSDK_GetUserTestWithResponseBodyFields(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getUser-testWithResponseBodyFields")),
	)

	res, err := s.GetUser(ctx, "test123")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.User.Metadata.Allergies)
	assert.Equal(t, sdkplatformtest.String("none"), res.User.Metadata.Allergies)
	assert.Equal(t, "red", res.User.Metadata.AdditionalProperties["color"])
	assert.Equal(t, "test123", res.User.AssociatedIds[1])

}

func TestSDK_GetFullyFlattenedRequestNamedExampleThatIsntMatchedAcrossDifferentExamples(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_URL", "")),
		sdkplatformtest.WithClient(createTestHTTPClient("getFullyFlattenedRequest-namedExampleThatIsntMatchedAcrossDifferentExamples")),
	)

	res, err := s.GetFullyFlattenedRequest(ctx, "en", operations.GetFullyFlattenedRequestRequestBody{
		Name: "<value>",
	}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSDK_PostFile(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("postFile")),
	)

	content, fileErr := os.Open("../.speakeasy/testfiles/postfiletest.txt")
	require.NoError(t, fileErr)

	res, err := s.PostFile(ctx, operations.PostFileRequestBody{
		File: components.File{
			FileName: "postfiletest.txt",
			Content:  content,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.File)
	assert.Equal(t, []byte("0x8fBAEeAAE7"), readBytes(res.File))

}

func TestSDK_GetPolymorphism(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getPolymorphism")),
	)

	res, err := s.GetPolymorphism(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetPolymorphismResponseBody{
		OneOfWithUnionDescription: sdkplatformtest.Pointer(operations.CreateOneOfWithUnionDescriptionSimpleObject(
			components.SimpleObject{
				Str: "example",
			},
		)),
		OneOfWithFactoredOutProperties: sdkplatformtest.Pointer(components.CreateOneOfWithFactoredOutPropertiesOneOfWithFactoredOutPropertiesSimpleObject(
			components.OneOfWithFactoredOutPropertiesSimpleObject{
				Str:             "example",
				AnExtraProperty: sdkplatformtest.String("example"),
			},
		)),
		SimpleAllOf: &operations.SimpleAllOf{
			Str:  sdkplatformtest.String("example"),
			Bool: sdkplatformtest.Bool(true),
		},
		AllOfWithFactoredOutProperties: &operations.AllOfWithFactoredOutProperties{
			AnOverridingProperty: sdkplatformtest.String("example"),
			AnotherProperty:      sdkplatformtest.String("example"),
			AnExtraProperty:      sdkplatformtest.String("example"),
		},
	}, res.Object)

}

func TestSDK_GetUnionErrors(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getUnionErrors")),
	)

	res, err := s.GetUnionErrors(ctx, 12)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetUnionErrorsResponseBody{
		Pages: []string{
			"<value>",
		},
	}, res.Object)

}

func TestSDK_GetRequestBodyFlattenedAway(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getRequestBodyFlattenedAway")),
	)

	res, err := s.GetRequestBodyFlattenedAway(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSDK_GetUser(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getUser")),
	)

	res, err := s.GetUser(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.User)
	assert.Equal(t, &components.User{
		ID:    "<id>",
		Email: "Trystan_Crooks@hotmail.com",
	}, res.User)

}

func TestSDK_Chat(t *testing.T) {
	t.Skip("incomplete test found please make sure to address the following errors: [`workflow step chat.test referencing operation chat is not currently supported`]")
}

func TestSDK_GetBinaryDefaultResponse(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("getBinaryDefaultResponse")),
	)

	res, err := s.GetBinaryDefaultResponse(ctx)
	require.NoError(t, err)
	assert.NotContains(t, []any{200, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511}, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Bytes)
	assert.Equal(t, []byte("0xf58AcDF799"), readBytes(res.Bytes))

}

func TestSDK_UserLifecycle(t *testing.T) {
	ctx := context.Background()

	s := sdkplatformtest.New(
		sdkplatformtest.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		sdkplatformtest.WithClient(createTestHTTPClient("user-lifecycle")),
	)

	createRes, err := s.CreateUser(ctx, components.BaseUser{
		Email:      "Trystan_Crooks@hotmail.com",
		FirstName:  sdkplatformtest.String("Trystan"),
		LastName:   sdkplatformtest.String("Crooks"),
		Age:        sdkplatformtest.Float64(32),
		PostalCode: sdkplatformtest.String("94110"),
		Metadata: &components.Metadata{
			Allergies: sdkplatformtest.String("none"),
			AdditionalProperties: map[string]string{
				"color":      "red",
				"height":     "182",
				"weight":     "77",
				"is_smoking": "true",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, createRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Trystan_Crooks@hotmail.com", createRes.User.Email)
	assert.NotNil(t, createRes.User.PostalCode)
	assert.Equal(t, sdkplatformtest.String("94110"), createRes.User.PostalCode)

	getRes, err := s.GetUser(ctx, createRes.User.ID)
	require.NoError(t, err)
	assert.Equal(t, 200, getRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Trystan_Crooks@hotmail.com", getRes.User.Email)
	assert.NotNil(t, getRes.User.FirstName)
	assert.Equal(t, sdkplatformtest.String("Trystan"), getRes.User.FirstName)
	assert.NotNil(t, getRes.User.LastName)
	assert.Equal(t, sdkplatformtest.String("Crooks"), getRes.User.LastName)
	assert.NotNil(t, getRes.User.Age)
	assert.Equal(t, sdkplatformtest.Float64(32), getRes.User.Age)
	assert.NotNil(t, getRes.User.PostalCode)
	assert.Equal(t, sdkplatformtest.String("94110"), getRes.User.PostalCode)

	user := *getRes.User
	user.PostalCode = sdkplatformtest.String("94107")
	user.Age = getRes.User.Age

	updateRes, err := s.UpdateUser(ctx, createRes.User.ID, user)
	require.NoError(t, err)
	assert.Equal(t, 200, updateRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Trystan_Crooks@hotmail.com", updateRes.User.Email)
	assert.NotNil(t, updateRes.User.FirstName)
	assert.Equal(t, sdkplatformtest.String("Trystan"), updateRes.User.FirstName)
	assert.NotNil(t, updateRes.User.LastName)
	assert.Equal(t, sdkplatformtest.String("Crooks"), updateRes.User.LastName)
	assert.NotNil(t, updateRes.User.Age)
	assert.Equal(t, sdkplatformtest.Float64(32), updateRes.User.Age)
	assert.NotNil(t, updateRes.User.PostalCode)
	assert.Equal(t, sdkplatformtest.String("94107"), updateRes.User.PostalCode)

	updateAgainRes, err := s.UpdateUser(ctx, createRes.User.ID, components.User{
		ID:         createRes.User.ID,
		Email:      updateRes.User.Email,
		FirstName:  updateRes.User.FirstName,
		LastName:   updateRes.User.LastName,
		Age:        sdkplatformtest.Float64(33),
		PostalCode: sdkplatformtest.String("94110"),
		Metadata:   updateRes.User.Metadata,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, updateAgainRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Trystan_Crooks@hotmail.com", updateAgainRes.User.Email)
	assert.NotNil(t, updateAgainRes.User.FirstName)
	assert.Equal(t, sdkplatformtest.String("Trystan"), updateAgainRes.User.FirstName)
	assert.NotNil(t, updateAgainRes.User.LastName)
	assert.Equal(t, sdkplatformtest.String("Crooks"), updateAgainRes.User.LastName)
	assert.NotNil(t, updateAgainRes.User.Age)
	assert.Equal(t, sdkplatformtest.Float64(33), updateAgainRes.User.Age)
	assert.NotNil(t, updateAgainRes.User.PostalCode)
	assert.Equal(t, sdkplatformtest.String("94110"), updateAgainRes.User.PostalCode)

	deleteRes, err := s.DeleteUser(ctx, createRes.User.ID)
	require.NoError(t, err)
	assert.Equal(t, 200, deleteRes.HTTPMeta.Response.StatusCode)

}
